edition: 1.0.0
name: stable-diffusion-web
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "fc-access" #  秘钥别名

vars: # 全局变量
  region: "us-east-1"
  service:
    name: stable-diffusion-web
    description: "stable-diffusion-webui(超火的AI绘画)"
    ossMountConfig:
      mountPoints:
        - bucketName: "fc-vine"
          endpoint: "http://oss-${vars.region}-internal.aliyuncs.com"
          bucketPath: '/stable-diffusion-web/data'
          mountDir: /data
          readOnly: false
        - bucketName: "fc-vine"
          endpoint: "http://oss-${vars.region}-internal.aliyuncs.com"
          bucketPath: '/stable-diffusion-web/output'
          mountDir: /output
          readOnly: false
  functionName: "stable-diffusion-web"

services:
  fc-nas-init:
    component: fc
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "nas-init"
        description: 'Prepare nas'
        codeUri: './code/nas-init'
        runtime: python3.9
        timeout: 1200
        memorySize: 128
        cpu: 0.1
        diskSize: 10240
        instanceConcurrency: 1
        handler: index.handler
  fc-gpu: # 业务名称/模块名称
    component:  fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
    # 重要说明!!!
    # - 根据您选择直接使用官方公开示例镜像、或者从源码构建镜像这2种不同的方式，需要对s.yaml进行一些微调，具体说明如下：
    #    - 1. 如果您期望直接使用官方公开示例镜像，请删除/注释pre-deploy部分，这样将在s deploy阶段跳过构建镜像，直接进行部署（官网公开示例镜像均为public镜像，无须构建可直接在函数中使用）。
    #    - 2. 如果您期望从源码构建镜像，则保留pre-deploy部分，这样将在s deploy阶段自动构建镜像，然后进行部署。
      pre-deploy:
        # - run: go mod tidy
        #   path: ./code/stable-diffusion/healthCheck
        # - run: GO111MODULE=on GOOS=linux CGO_ENABLED=0 go build -o target/main main.go
        #   path: ./code/stable-diffusion/healthCheck
        - component: fc build --use-docker --dockerfile ./code/stable-diffusion/Dockerfile  # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
      # post-deploy:
      #   - component: fc api UpdateFunction --region ${vars.region} --header
      #       '{"x-fc-disable-container-reuse":"True"}' --path
      #       '{"serviceName":"${vars.service.name}","functionName":"${vars.functionName}"}'
    props:
      region: ${vars.region}              # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: ${vars.functionName}
        description: "This is an API that detects the GPU instance environment"
        caPort: 9000
        cpu: 2
        memorySize: 8192
        diskSize: 512
        gpuMemorySize: 4096
        instanceType: g1
        timeout: 300
        instanceConcurrency: 100
        runtime: custom-container
        customContainerConfig:
          image: ${env(imageurl)}
          command: >-
            ["sh","-c","python -u webui.py --listen --port 7860 | ./healthCheck/target/main"]
        codeUri: ./code/stable-diffusion
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - HEAD
              - PUT
              - DELETE
              - OPTIONS

  keep-warm: # 辅助函数, 2 min 定时预热
    component: fc # 组件名称
    actions:
      post-deploy:
        - component: fc invoke
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: keep-warm
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './code/keep-warm'
        handler: index.handler
        runtime: python3
        timeout: 120
        memorySize: 128
        cpu: 0.1
        diskSize: 512
        instanceConcurrency: 1
        environmentVariables:
          KEEP_WARM_URL: ${fc-gpu.output.url.system_url}/healthcheck
      triggers:
        - name: timerTrigger
          type: timer
          # qualifier: LATEST    
          config:
            payload: '{}'
            cronExpression: '@every 2m'
            enable: false
#END